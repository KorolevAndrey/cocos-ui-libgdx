apply plugin: 'maven'

group = 'net.mwplay'
archivesBaseName = "cocos-libgdx-ui"

ext {
    M_description = 'It is a ui library of ligdx with cocostudio.'

    M_url = 'https://github.com/varFamily/cocos-ui-libgdx.git'
    M_scm_url = 'scm:git@git@github.com:varFamily/cocos-ui-libgdx.git'
    M_scm_connection = 'scm:git@git@github.com:varFamily/cocos-ui-libgdx.git'
    M_scm_developerConnection = 'git@github.com:varFamily/cocos-ui-libgdx.git'

    M_license_name = 'The Apache Software License, Version 2.0'
    M_license_url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'

    M_username = project.hasProperty("M_username") ? M_username : System.getenv("M_username")
    M_password = project.hasProperty("M_password") ? M_username : System.getenv("M_username")
}

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: M_username, password: M_password)
            }
            pom.project {
                name project.name
                packaging 'jar'
                description M_description
                url M_url

                scm {
                    url M_scm_url
                    connection M_scm_connection
                    developerConnection M_scm_developerConnection
                }

                licenses {
                    license {
                        name M_license_name
                        url M_license_url
                        distribution 'repo'
                    }
                }

                developers {
                    developer {
                        id 'qq200600'
                        name 'Tian qiujie'
                    }
                    developer {
                        id 'htynkn'
                        name 'Yunkun Huang'
                        email 'htynkn@gmail.com'
                    }
                }
            }
        }
    }
}

task clearPj(type: Delete) {
    delete 'build', 'target'
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.java.srcDirs
    exclude('demo/')
    exclude('test/')
}

task makeJar(type: Jar) {
    from sourceSets.main.java.srcDirs
    exclude('demo/')
    exclude('test/')
}

javadoc {
    options.encoding = 'UTF-8'
}

task javadocJar(type: Jar, dependsOn: [javadoc]) {
    classifier = 'javadoc'
    from 'build/docs/javadoc'
}

artifacts {
    archives makeJar
    archives javadocJar
    archives sourcesJar
}
